<?php
/**
 * This file is part of YAPEPBase.
 *
 * @package    YapepBaseTest
 * @subpackage Database
 * @copyright  2011 The YAPEP Project All rights reserved.
 * @license    http://www.opensource.org/licenses/bsd-license.php BSD License
 */

namespace YapepBaseTest\Database;


use YapepBaseTest\Mock\Database\PDOStatementMock;

/**
 * Test class for DbResult.
 * Generated by PHPUnit on 2012-02-01 at 12:21:55.
 */
class DbResultTest extends \YapepBaseTest\TestAbstract {

	public function testFetchAll() {
		$data = array(array('column1' => 'data1', 'column2' => 'data2'));
		$statement = new PDOStatementMock($data);
		$result = new \YapepBase\Database\DbResult($statement);
		$this->assertEquals($data, $result->fetchAll());
	}

	public function testColumn() {
		$data = array(array('column1' => 'data1', 'column2' => 'data2'),
			array('column1' => 'data3', 'column2' => 'data4'));
		$statement = new PDOStatementMock($data);
		$result = new \YapepBase\Database\DbResult($statement);
		$this->assertEquals('data1', $result->fetchColumn(0));
		$this->assertEquals('data4', $result->fetchColumn(1));
	}

	public function testColumnAll() {
		$data = array(
			array(
				'column1' => 'data1',
				'column2' => 'data2'
			),
			array(
				'column1' => 'data3',
				'column2' => 'data4'
			)
		);
		$statement = new PDOStatementMock($data);
		$result = new \YapepBase\Database\DbResult($statement);
		$this->assertEquals(array('data1', 'data3'), $result->fetchColumnAll(0));

		// Since the dataset can only be looped through once, we instantiate a new one
		$statement = new PDOStatementMock($data);
		$result = new \YapepBase\Database\DbResult($statement);
		$this->assertEquals(array('data2', 'data4'), $result->fetchColumnAll(1));
	}

	/**
	 * Tests the getAffectedRowCount() method.
	 *
	 * @return void
	 */
	public function testGetAffectedRowCount() {
		$this->markTestIncomplete();
	}

	public function testArray() {
		$data = array(
			array('column1' => 'data1', 'column2' => 'data2'),
			array('column1' => 'data3', 'column2' => 'data4'),
			array('column1' => 'data5', 'column2' => 'data6'),
		);
		$statement = new PDOStatementMock($data);
		$result = new \YapepBase\Database\DbResult($statement);
		$this->assertEquals(true, $result->valid());
		$this->assertEquals(array('column1' => 'data1', 'column2' => 'data2'), $result->current());
		$this->assertEquals(array('column1' => 'data1', 'column2' => 'data2'), $result->current());
		$this->assertEquals(0, $result->key());
		$this->assertEquals(true, $result->valid());
		$this->assertEquals(array('column1' => 'data3', 'column2' => 'data4'), $result->next());
		$this->assertEquals(array('column1' => 'data3', 'column2' => 'data4'), $result->current());
		$this->assertEquals(1, $result->key());
		$this->assertEquals(true, $result->valid());
		$this->assertEquals(array('column1' => 'data5', 'column2' => 'data6'), $result->fetch());
		$this->assertEquals(array('column1' => 'data5', 'column2' => 'data6'), $result->current());
		$result->rewind();
		$this->assertEquals(array('column1' => 'data5', 'column2' => 'data6'), $result->current());
		$this->assertEquals(2, $result->key());
		$this->assertEquals(true, $result->valid());
		$this->assertEquals(false, $result->next());
		$this->assertEquals(false, $result->valid());
		$this->assertEquals(false, $result->key());

		$statement = new PDOStatementMock($data);
		$result = new \YapepBase\Database\DbResult($statement);
		$this->assertEquals(0, $result->key());

		$statement = new PDOStatementMock($data);
		$result = new \YapepBase\Database\DbResult($statement);
		$this->assertEquals(array('column1' => 'data1', 'column2' => 'data2'), $result->current());
	}
}
